#!/usr/bin/env ts-node
/**
 * Auto-generate `src/generated/posts.ts` containing typed meta for blog posts.
 * Run via `pnpm run generate:posts` (called in dev/build scripts).
 */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fg from 'fast-glob';
import matter from 'gray-matter';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const POSTS_DIR = path.resolve(__dirname, '../src/posts');
const OUTPUT_DIR = path.resolve(__dirname, '../src/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'posts.ts');

interface FrontMatter {
  title: string;
  date: string; // ISO string
  summary?: string;
  tags?: string[];
}

interface PostMeta extends FrontMatter {
  slug: string;
  path: string;
}

async function main() {
  if (!fs.existsSync(POSTS_DIR)) {
    console.warn(
      `‚ö†Ô∏è  Posts directory ${POSTS_DIR} not found. Skipping index generation.`,
    );
    return;
  }

  const entries = await fg(['**/*.mdx', '**/*.md'], { cwd: POSTS_DIR });
  const posts: PostMeta[] = [];

  for (const rel of entries) {
    const abs = path.join(POSTS_DIR, rel);
    const src = fs.readFileSync(abs, 'utf8');
    const { data } = matter(src);
    const front = data as Partial<FrontMatter>;

    if (!front.title || !front.date) {
      console.warn(
        `Skipping ${rel} ‚Äì missing required front-matter (title/date).`,
      );
      continue;
    }

    const slug = rel.replace(/\.(mdx|md)$/, '');

    posts.push({
      slug,
      path: `/blog/${slug}`,
      title: front.title,
      date: front.date,
      summary: front.summary ?? '',
      tags: front.tags ?? [],
    });
  }

  // Sort newest first
  posts.sort((a, b) => (a.date < b.date ? 1 : -1));

  if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR, { recursive: true });

  const banner = `// This file is auto-generated by scripts/generatePostIndex.ts ‚Äì DO NOT EDIT\n`;
  const typeDef = `export type PostMeta = {\n  slug: string;\n  path: string;\n  title: string;\n  date: string;\n  summary?: string;\n  tags?: string[];\n};\n\n`;
  const array = `export const posts: PostMeta[] = ${JSON.stringify(posts, null, 2)};\n`;

  fs.writeFileSync(OUTPUT_FILE, banner + '\n' + typeDef + array, 'utf8');
  console.log(
    `üìù Generated ${posts.length} post meta ‚Üí ${path.relative(process.cwd(), OUTPUT_FILE)}`,
  );
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
